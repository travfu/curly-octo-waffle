---
import { Image } from 'astro:assets';
import { useTranslation } from '@i18n/useTranslation';
import type { LocaleCode } from '@i18n/utils';
import { getCollection } from 'astro:content';
import EquipmentIcon from './icons/EquipmentIcon.astro';
import ElementIcon from './icons/ElementIcon.astro';
import EquipmentGradePill from './EquipmentGradePill.astro';
import WeaponDamageStrip from './WeaponDamageStrip.astro';
import AffinityIcon from '@assets/icons/affinity.png';
import WeaponIcon from './icons/WeaponIcon.astro';

interface Props {
  locale: LocaleCode;
  forMonsterId?: number;
}

const { locale, forMonsterId } = Astro.props;
const t = useTranslation(locale);

const weapons = await getCollection(
  'weapon',
  forMonsterId ? ({ data }) => data._series.monsterSettingId === forMonsterId : undefined
);
if (!weapons.length) return;

const minGradeMap: Map<string, number> = new Map();
const availableWeapons = weapons
  .sort(
    (w1, w2) =>
      w1.data.series.localeCompare(w2.data.series) ||
      w1.data.category.localeCompare(w2.data.category) ||
      w1.data.grade - w2.data.grade
  )
  .filter(({ data }) => {
    // exclude weapons below minimum crafting grade
    const key = [data.series, data.category].join('-');
    if (data._crafting?.[0].create) {
      minGradeMap.set(key, data.grade);
      return true;
    }
    return (minGradeMap.get(key) || 100) <= data.grade;
  });
---

<table class="border-spacing-y-3 table-fixed">
  <thead>
    <tr class="uppercase text-xs text-gray-500">
      <td class="px-2 pl-12 col-name">{t('Common/SETTINGS_ACCOUNT_NAME')}</td>
      <td class="px-2 text-center col-atk">{t('Common/ATTACK')}</td>
    </tr>
  </thead>
  <tbody class="text-sm">
    {
      availableWeapons.map(({ data }) => {
        const name = t(`Weapon/NAME_${data.weaponId}`);
        const { attack, critical, elementAttack } = data._levels[0] || {};
        return (
          <tr>
            <td class="px-2 flex gap-1 items-center col-name">
              <div style="width:35px">
                <EquipmentIcon key={data.assetKey} alt={name} height={35} />
              </div>
              <div class="flex flex-col">
                {name}
                <div class="flex gap-1">
                  <WeaponIcon key={data.category} alt={data.category} height={15} />
                  <EquipmentGradePill grade={data.grade} level={1} />
                </div>
              </div>
            </td>
            <td class="px-2 col-atk">
              <div>
                <div class="flex justify-between items.center gap-1">
                  <span>{attack}</span>
                  {elementAttack && (
                    <div class="flex items-center">
                      <ElementIcon key={data.elementType} alt={data.elementType} width={15} />
                      <span>{elementAttack}</span>
                    </div>
                  )}
                  <div class="flex items-center">
                    <Image src={AffinityIcon} alt={t('Common/AFFINITY')} width={20} />
                    <span>{critical ? `${critical}%` : '-'}</span>
                  </div>
                </div>
                <WeaponDamageStrip
                  attack={attack}
                  elementAttack={elementAttack}
                  elementType={data.elementType}
                />
              </div>
            </td>
          </tr>
        );
      })
    }
  </tbody>
</table>

<style>
  table tbody td {
    @apply bg-slate-800 p-2;
  }
  table tbody td:first-child {
    @apply rounded-l;
  }
  table tbody td:last-child {
    @apply rounded-r;
  }

  .col-name {
    @apply w-80;
  }
  .col-atk {
    @apply w-36;
  }
</style>
