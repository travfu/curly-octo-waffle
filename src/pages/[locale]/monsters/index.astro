---
import { getCollection } from 'astro:content';

import Layout from '@layouts/Layout.astro';
import MonsterIcon from '@components/icons/MonsterIcon.astro';
import { getStaticLocalePaths, type LocaleCode } from '@i18n/utils';
import { useTranslation } from '@i18n/useTranslation';
import { MONSTER_CONFIG } from '@config/monsters';

export async function getStaticPaths() {
  return getStaticLocalePaths();
}

const locale = Astro.params.locale as LocaleCode;
const monsters = (await getCollection('monster')).filter(
  (obj) => (MONSTER_CONFIG as any)[obj.data.nameLocalizationKey]?.active
);
const t = useTranslation(locale);

const toMonsterPath = (key: string): string => {
  const monsterSlug = t(['Enemy', key], 'en')?.toLocaleLowerCase().replace(' ', '-');
  return [import.meta.env.BASE_URL, locale, 'monsters', monsterSlug].join('/');
};
---

<Layout title={t('Common/MONSTER_LIST')} locale={locale}>
  <main>
    <ul role="list" class="link-card-grid">
      {
        monsters
          .sort(
            ({ data: dataA }, { data: dataB }) =>
              (dataA._guidebook?.Order || 9999) - (dataB._guidebook?.Order || 0)
          )
          .map((obj) => (
            <a href={toMonsterPath(obj.data.nameLocalizationKey)}>
              <h6>{t(['Enemy', obj.data.nameLocalizationKey])}</h6>
              <MonsterIcon key={obj.data.assetKey} />
            </a>
          ))
      }
    </ul>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(8ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
