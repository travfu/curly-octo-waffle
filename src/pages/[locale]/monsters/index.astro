---
import { getCollection, getEntry } from 'astro:content';

import Layout from '@layouts/Layout.astro';
import MonsterIcon from '@components/icons/MonsterIcon.astro';
import { getStaticLocalePaths, localeOptions, toGameLocaleKey } from '@i18n/utils';

export async function getStaticPaths() {
  return getStaticLocalePaths();
}

const { locale } = Astro.params;
const allMonsters = await getCollection('monster');
const enMessages = await getEntry('messages', 'en-us');
const messages = await getEntry('messages', toGameLocaleKey(locale));

const toMonsterPath = (key: string): string => {
  const monsterSlug = enMessages.data[`Enemy/${key}`]?.toLowerCase().replace(' ', '-');
  return [import.meta.env.BASE_URL, locale, 'monsters', monsterSlug].join('/');
};
---

<Layout title={messages.data['Common/MONSTER_LIST']}>
  <main>
    <h1>Monster Hunter <span class="text-gradient">Now</span></h1>
    <ul role="list" class="link-card-grid">
      {
        allMonsters
          .sort(
            ({ data: dataA }, { data: dataB }) =>
              (dataA._guidebook?.Order || 9999) - (dataB._guidebook?.Order || 0)
          )
          .map((obj) => (
            <a href={toMonsterPath(obj.data.nameLocalizationKey)}>
              <h6>
                {messages['data'][`Enemy/${obj.data.nameLocalizationKey}`] ||
                  obj.data.nameLocalizationKey}
              </h6>
              <MonsterIcon key={obj.data.assetKey} />
            </a>
          ))
      }
    </ul>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(8ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
