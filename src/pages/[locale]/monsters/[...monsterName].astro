---
import { getCollection, getEntry } from 'astro:content';

import { MONSTER_CONFIG } from '@config/monsters';
import Layout from '@layouts/Layout.astro';
import { localeOptions } from '@i18n/utils';
import { useTranslation } from '@i18n/useTranslation';

import type { LocaleCode } from '@i18n/utils';
import MonsterIcon from '@components/icons/MonsterIcon.astro';
import BreakablePartsTable from '@components/BreakablePartsTable.astro';
import PartsDamageTable from '@components/PartsDamageTable.astro';
import WeaponsList from '@components/WeaponsList.astro';

export async function getStaticPaths() {
  // generate [locale]/monsters/[monsterName] routes as a product
  // of all languages and monster names (e.g. rathian) in english.
  const monsters = (await getCollection('monster')).filter(
    (obj) => (MONSTER_CONFIG as any)[obj.data.nameLocalizationKey]?.active
  );
  const enMessages = await getEntry('messages', 'en-us');
  const values = monsters
    .map((obj) => ({
      name: (enMessages['data'][`Enemy/${obj.data.nameLocalizationKey}`] || '')
        .trim()
        .toLowerCase()
        .replace(' ', '-'),
      id: obj.data.id,
    }))
    .filter(({ name }) => !!name);

  const routes: {
    params: { locale: LocaleCode; monsterName: string };
    props: { id: (typeof monsters)[number]['id'] };
  }[] = [];
  values.forEach((obj) => {
    localeOptions
      .map((obj) => obj.locale)
      .forEach((lang) => {
        routes.push({
          params: { locale: lang, monsterName: obj.name },
          props: { id: obj.id as any },
        });
      });
  });
  return routes;
}

const locale = Astro.params.locale as LocaleCode;
const { id } = Astro.props;
const t = useTranslation(locale);

const monster = (await getEntry('monster', id)).data;
const name = t(['Enemy', monster.nameLocalizationKey]);
---

<Layout title={`${t('Common/MONSTER_LIST')}: ${name}`} locale={locale}>
  <div class="flex border border-purple-500 p-2">
    <div class="flex flex-col gap-4">
      <div class="flex items-center gap-2">
        <div transition:name={monster.assetKey}>
          <MonsterIcon
            variant="icon"
            key={monster.assetKey}
            alt={`${name}-icon`}
            width={50}
            height={50}
          />
        </div>
        <div class="flex flex-col">
          <h2 class="text-3xl">{name}</h2>
          <div class="text-xs text-gray-400">{t(monster._guidebook?.SpeciesKey)}</div>
        </div>
      </div>
      <p>{t(monster._guidebook?.DescriptionKey)}</p>
      <p>{t(monster._guidebook?.HintKey)}</p>
    </div>
    <div class="self-end">
      <MonsterIcon variant="portrait" key={monster.assetKey} alt={`${name}-portrait`} />
    </div>
  </div>

  <div class="flex gap-10">
    <PartsDamageTable data={monster._parts?.parameter.partDataList} locale={locale} />
    <BreakablePartsTable data={monster._parts?.parameter.partDataList} locale={locale} />
  </div>

  <WeaponsList forMonsterId={monster.id} locale={locale} />
</Layout>
