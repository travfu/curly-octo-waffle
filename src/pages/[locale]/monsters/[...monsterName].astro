---
import { getCollection, getEntry, z } from 'astro:content';

import { MONSTER_CONFIG } from '@config/monsters';
import Layout from '@layouts/Layout.astro';
import { localeOptions } from '@i18n/utils';
import { useTranslation } from '@i18n/useTranslation';

import type { LocaleCode } from '@i18n/utils';
import MonsterIcon from '@components/icons/MonsterIcon.astro';
import BreakablePartsTable from '@components/BreakablePartsTable.astro';
import PartsDamageTable from '@components/PartsDamageTable.astro';
import BiomeIcon from '@components/icons/BiomeIcon.astro';
import WeaponCard from '@components/WeaponCard';
import { getWeaponsByCategory } from '@utils/content/weapons';
import { IconSrc } from '@utils/icon';
import type { zElementType } from '@content/_common';
import { slugify } from '@utils/url';

export async function getStaticPaths() {
  // generate [locale]/monsters/[monsterName] routes as a product
  // of all languages and monster names (e.g. rathian) in english.
  const monsters = (await getCollection('monster')).filter(
    (obj) => (MONSTER_CONFIG as any)[obj.data.nameLocalizationKey]?.active
  );
  const enMessages = await getEntry('messages', 'en-us');
  const values = monsters
    .map((obj) => ({
      name: slugify(enMessages['data'][`Enemy/${obj.data.nameLocalizationKey}`] || ''),
      id: obj.data.id,
    }))
    .filter(({ name }) => !!name);

  const routes: {
    params: { locale: LocaleCode; monsterName: string };
    props: { id: (typeof monsters)[number]['id'] };
  }[] = [];
  values.forEach((obj) => {
    localeOptions
      .map((obj) => obj.locale)
      .forEach((lang) => {
        routes.push({
          params: { locale: lang, monsterName: obj.name },
          props: { id: obj.id as any },
        });
      });
  });
  return routes;
}

const locale = Astro.params.locale as LocaleCode;
const { id } = Astro.props;
const t = useTranslation(locale);

const monster = (await getEntry('monster', id)).data;
const name = t(['Enemy', monster.nameLocalizationKey]);
const atkElements = [monster._guidebook?.AttackElement1, monster._guidebook?.AttackElement2].filter(
  Boolean
) as number[];
const elementWeaknessKeys = Object.entries(monster._parts?.elementalWeaknessChart || {})
  .filter(([_, id]) => Boolean(id))
  .map((obj) => obj[0].toUpperCase()) as z.infer<typeof zElementType>[];

const weaponsByCategory = await getWeaponsByCategory({ forMonsterId: monster.id });
---

<Layout title={`${t('Common/MONSTER_LIST')}: ${name}`} locale={locale}>
  <div class="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3" id="xyz">
    <div class="md:col-span-2 flex items-center gap-2">
      <div transition:name={monster.assetKey}>
        <MonsterIcon
          variant="icon"
          key={monster.assetKey}
          alt={`${name}-icon`}
          width={50}
          height={50}
        />
      </div>
      <div class="flex flex-col">
        <h2 class="text-3xl">{name}</h2>
        <div class="text-xs text-gray-400">{t(monster._guidebook?.SpeciesKey)}</div>
      </div>
    </div>

    <div class="flex flex-col gap-5 lg:row-span-2 md:col-end-3 lg:col-end-4">
      <MonsterIcon variant="portrait" key={monster.assetKey} alt={`${name}-portrait`} />
      <div class="flex flex-col gap-3 px-[5%]">
        <div class="flex justify-between items-center">
          <div>{t('Common/ATTACK_ELEMENT')}</div>
          <div class="flex gap-1 items-center">
            {
              atkElements.length
                ? atkElements.map((id) => <img src={IconSrc.ELEMENT(id)} class="w-[30px]" />)
                : '-'
            }
          </div>
        </div>
        <div class="flex justify-between">
          <div>{t('Common/WEAK_ELEMENT')}</div>
          <div class="flex gap-1 items-center">
            {
              elementWeaknessKeys.length
                ? elementWeaknessKeys.map((key) => (
                    <img src={IconSrc.ELEMENT(key)} class="w-[30px]" />
                  ))
                : '-'
            }
          </div>
        </div>
        <div class="flex justify-between">
          <div>{t('Common/WHERE_TO_APPEAR')}</div>
          <div class="flex gap-1 items-center">
            {monster._guidebook?.ForestAreaFlag ? <BiomeIcon key="forest" size={30} /> : null}
            {monster._guidebook?.DesertAreaFlag ? <BiomeIcon key="desert" size={30} /> : null}
            {monster._guidebook?.SwampAreaFlag ? <BiomeIcon key="swamp" size={30} /> : null}
          </div>
        </div>
      </div>
    </div>

    <div class="md:row-start-2">
      <h3 class="font-semibold text-violet-500">
        {t('Common/MONSTER_DETAIL_DESCRIPTION_TITLE')}
      </h3>
      <p class="text-sm">{t(monster._guidebook?.DescriptionKey)}</p>
    </div>

    <div class="">
      <h3 class="font-semibold text-violet-500">{t('Common/USEFUL_INFORMATION')}</h3>
      <p class="text-sm">{t(monster._guidebook?.HintKey)}</p>
    </div>

    <div>
      <h3 class="font-semibold text-violet-500">{t('Common/BREAKABLE_PARTS')}</h3>
      <div class="pl-2">
        <BreakablePartsTable data={monster._parts?.parameter.partDataList} locale={locale} />
      </div>
    </div>

    <div class="md:col-span-2 p-10">
      <h3 class="font-semibold text-violet-500">Parts</h3>
      <div class="overflow-auto">
        <PartsDamageTable data={monster._parts?.parameter.partDataList} locale={locale} />
      </div>
    </div>

    <div class="col-span-1 md:col-span-2 lg:col-span-3 flex flex-col gap-2">
      <h3 class="font-semibold text-violet-500">{t('Common/WEAPON')}</h3>
      <div>
        <div class="flex flex-col gap-6 md:flex-row md:flex-wrap">
          {
            Object.values(weaponsByCategory).map((obj) => (
              <div class="rounded-lg bg-zinc-800 px-2 py-3">
                <WeaponCard data={obj} locale={locale} client:load />
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>

  <style>
    #xyz > div {
      @apply bg-zinc-900 rounded-lg border border-zinc-700 p-2 md:p-5;
    }
  </style>
</Layout>
